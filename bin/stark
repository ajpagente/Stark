#!/usr/bin/env ruby

if RUBY_VERSION < '2.0.0'
  abort "error: Stark requires Ruby 2.0.0 or higher."
end

#if $PROGRAM_NAME == __FILE__
#  $LOAD_PATH.unshift File.expand_path('../', __FILE__)
#end

require_relative '../stark/reporter/html'
require_relative '../stark/parser/csvparser'
require_relative '../stark/parser/notesparser'
require_relative '../stark/version'
require 'optparse'

options = {}
options[:reporthtml] = 'tests.html'

OptionParser.new do |opts|
  opts.banner = "stark -p PRODUCT -i FOLDERPATH"
  opts.on('-i', '--input FOLDERPATH', 'The folder where Stark searches for csv files to parse.') do |path|
    options[:folderpath] = path
  end
  opts.on('-o', '--output FILE.html', 'The html test report. If not specified, tests.html is generated in the current directory.') do |path|
    options[:reporthtml] = path
  end
  opts.on('-p', '--product PRODUCT', 'The name of the product. Typically it includes the OS and version. Example: Stark iOS 1.2.3') do |prod|
    options[:product] = prod
  end
  opts.on_tail('-h', '--help', 'Show this message') { puts opts; exit }
  opts.on_tail("-v", "--version", "Show version") { puts Stark::VERSION; exit }
  opts.parse!

end

# Check for mandatory options
if not (options[:product] && options[:folderpath])
  puts 'ERROR: Product and folder path is mandatory'
  exit(1)
end

csv_search_pattern = options[:folderpath] + "/*.csv"
csvs = Dir.glob(csv_search_pattern)

html = Stark::HTML.new(options[:product])
csvparser = Stark::CSVParser.new(html)
csvs.each do |csv_file|
  csvparser.parse(csv_file)
end

notes_search_pattern = options[:folderpath] + "/notes.sta"
notes_file = Dir.glob(notes_search_pattern)
if notes_file.size != 0 
  notesparser = Stark::NotesParser.new()
  notesparser.parse(notes_file[0])
  notes = notesparser.notes
  csvparser.reporter.format_notes(notes)
end

csvparser.reporter.write_report(options[:reporthtml])


